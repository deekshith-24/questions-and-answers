[
  {
    "id": 1,
    "title": "Reverse a Linked List",
    "question": "Given a singly linked list, reverse it.",
    "solutions": [
      {
        "language": "C++",
        "code": "class Solution {\n  public:\n   int countOnes(vector<int> arr, int col) {\n       int low = 0, high = col - 1;\n      \n       // Finding lower bound for 1\n       while (low <= high) {\n           int mid = low +((high -low) >> 1);\n           if (arr[mid] == 1) {\n               high = mid - 1;\n           }\n           else {\n               low = mid + 1;\n           }\n       }\n       return low;\n   }\n   \n   int rowWithMax1s(vector<vector<int> > &arr) {\n        int n = arr.size();\n        int m = arr[0].size();\n        \n        int maxCount = 0, row = -1;\n        for (int i = 0; i < n; i++) {\n            int count = m - countOnes(arr[i], m);\n            if (count > maxCount) {\n                maxCount = count;\n                row = i;\n            }\n        }\n        return row;\n    }\n};"
      },
      {
          "language": "C++",
          "code": "class Solution {\n  public:\n   int countOnes(vector<int> arr, int col) {\n       int low = 0, high = col - 1;\n      \n       // Finding lower bound for 1\n       while (low <= high) {\n           int mid = low +((high -low) >> 1);\n           if (arr[mid] == 1) {\n               high = mid - 1;\n           }\n           else {\n               low = mid + 1;\n           }\n       }\n       return low;\n   }\n   \n   int rowWithMax1s(vector<vector<int> > &arr) {\n        int n = arr.size();\n        int m = arr[0].size();\n        \n        int maxCount = 0, row = -1;\n        for (int i = 0; i < n; i++) {\n            int count = m - countOnes(arr[i], m);\n            if (count > maxCount) {\n                maxCount = count;\n                row = i;\n            }\n        }\n        return row;\n    }\n};"
      }
    ]
  },
  {
    "id": 2,
    "title": "Reverse a Linked List",
    "question": "Given a singly linked list, reverse it.",
    "solutions": [
      {
        "language": "C++",
        "code": "class Solution {\n  public:\n   int countOnes(vector<int> arr, int col) {\n       int low = 0, high = col - 1;\n      \n       // Finding lower bound for 1\n       while (low <= high) {\n           int mid = low +((high -low) >> 1);\n           if (arr[mid] == 1) {\n               high = mid - 1;\n           }\n           else {\n               low = mid + 1;\n           }\n       }\n       return low;\n   }\n   \n   int rowWithMax1s(vector<vector<int> > &arr) {\n        int n = arr.size();\n        int m = arr[0].size();\n        \n        int maxCount = 0, row = -1;\n        for (int i = 0; i < n; i++) {\n            int count = m - countOnes(arr[i], m);\n            if (count > maxCount) {\n                maxCount = count;\n                row = i;\n            }\n        }\n        return row;\n    }\n};"
      },
      {
          "language": "C++",
          "code": "class Solution {\n  public:\n   int countOnes(vector<int> arr, int col) {\n       int low = 0, high = col - 1;\n      \n       // Finding lower bound for 1\n       while (low <= high) {\n           int mid = low +((high -low) >> 1);\n           if (arr[mid] == 1) {\n               high = mid - 1;\n           }\n           else {\n               low = mid + 1;\n           }\n       }\n       return low;\n   }\n   \n   int rowWithMax1s(vector<vector<int> > &arr) {\n        int n = arr.size();\n        int m = arr[0].size();\n        \n        int maxCount = 0, row = -1;\n        for (int i = 0; i < n; i++) {\n            int count = m - countOnes(arr[i], m);\n            if (count > maxCount) {\n                maxCount = count;\n                row = i;\n            }\n        }\n        return row;\n    }\n};"
      }
    ]
  },
  {
    "id": 3,
    "title": "Reverse a Linked List",
    "question": "Given a singly linked list, reverse it.",
    "solutions": [
      {
        "language": "C++",
        "code": "class Solution {\n  public:\n   int countOnes(vector<int> arr, int col) {\n       int low = 0, high = col - 1;\n      \n       // Finding lower bound for 1\n       while (low <= high) {\n           int mid = low +((high -low) >> 1);\n           if (arr[mid] == 1) {\n               high = mid - 1;\n           }\n           else {\n               low = mid + 1;\n           }\n       }\n       return low;\n   }\n   \n   int rowWithMax1s(vector<vector<int> > &arr) {\n        int n = arr.size();\n        int m = arr[0].size();\n        \n        int maxCount = 0, row = -1;\n        for (int i = 0; i < n; i++) {\n            int count = m - countOnes(arr[i], m);\n            if (count > maxCount) {\n                maxCount = count;\n                row = i;\n            }\n        }\n        return row;\n    }\n};"
      },
      {
          "language": "C++",
          "code": "class Solution {\n  public:\n   int countOnes(vector<int> arr, int col) {\n       int low = 0, high = col - 1;\n      \n       // Finding lower bound for 1\n       while (low <= high) {\n           int mid = low +((high -low) >> 1);\n           if (arr[mid] == 1) {\n               high = mid - 1;\n           }\n           else {\n               low = mid + 1;\n           }\n       }\n       return low;\n   }\n   \n   int rowWithMax1s(vector<vector<int> > &arr) {\n        int n = arr.size();\n        int m = arr[0].size();\n        \n        int maxCount = 0, row = -1;\n        for (int i = 0; i < n; i++) {\n            int count = m - countOnes(arr[i], m);\n            if (count > maxCount) {\n                maxCount = count;\n                row = i;\n            }\n        }\n        return row;\n    }\n};"
      }
    ]
  }
]
  