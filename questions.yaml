- id: 1
  title: "Square Root"
  question: |
    Given an integer n, find the square root of n. If n is not a perfect square, then return the floor value.
    Floor value of any number is the greatest Integer which is less than or equal to that number.
  solutions:
    - language: "C++"
      code: |
        class Solution {
          public:
            int floorSqrt(int n) {
                for (int i = 1; i <= n; i++) {
                    if (i * i <= n) {}
                    else return i - 1;
                }
                return 0;
            }
        };
    - language: "C++"
      code: |
        class Solution {
          public:
            int floorSqrt(int n) {
                int low = 1, high = n, mid, ans;
                
                while (low <= high) {
                    mid = (low + high) / 2;
                    
                    if (mid * mid <= n) {
                        ans = mid;
                        low = mid + 1;
                    } else high = mid - 1;
                }
                
                return ans;
            }
        };      
- id: 2
  title: "Nth Root of a Number using Binary Search"
  question: |
    Given two numbers N and M, find the Nth root of M. The nth root of a number M is defined as a number X when raised to the power N equals M. 
    If the 'nth root is not an integer, return -1.
  solutions:
    - language: "C++"
      code: |
        int power(long long num, int times, long long n) {
          long long val = 1ll;

          for (int i = 0; i < times; i++) {
            val = val * num;

            if (val > n) return 2;
          }

          if (val == n) return 0;
          else if (val < n) return 1;
          else return 2;
        }

        int NthRoot(int m, int n) {
          int low = 1, high = n, mid;

          while (low <= high) {
            mid = high - ((high - low) / 2);

            int cmp = power(mid * 1ll, m, n * 1ll);

            if (cmp == 0) return mid;
            else if (cmp == 1) low = mid + 1;
            else high = mid - 1;
          }

          return -1;
        }